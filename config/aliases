# ======================================================= #
# Agnostic Settings                                       #
# ======================================================= #
# encoding
export LC_ALL="en_US.UTF-8"
export LC_CTYPE="UTF-8"

# Setup the colors used for the terminal
# export CLICOLOR=1
# export LSCOLORS=GxFxCxDxBxegedabagaced
export EDITOR=nvim

# default dotfiles folder
export DOTFILES_PATH="$HOME/.dotfiles/"

# SSH
# eval $(ssh-agent) &> /dev/null
# add all private keys to agent
find ~/.ssh/ -type f -exec grep -l "PRIVATE" {} \; | xargs ssh-add &> /dev/null
# eval 'ssh-agent -s'

# Checking for rust
if [ -d "~/.cargo" ]; then
    source $HOME/.cargo/env
fi

# pyenv Settings
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
# penv Settings for Neovim
export NEOVIM2=$PYENV_ROOT"/versions/neovim2/bin/python2"
export NEOVIM3=$PYENV_ROOT"/versions/neovim3/bin/python3"
export NEOVIM3_PYPY=$PYENV_ROOT"/versions/neovim3_pypy/bin/python"

# ======================================================= #
# Agnostic Settings                                       #
# ======================================================= #
# True Colour Test
function __truecolourtest() {
    # Function to do a True Color Test
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s s s s s s s s s s s s s s s s;
        for (colnum = 0; colnum<256; colnum++) {
            r = 255-(colnum*255/255);
            g = (colnum*510/255);
            b = (colnum*255/255);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'
}
# 256 Colour Test
function __256colourtest() {
    # Function to do a 256 Color Test
    for i in {0..255} ; do
        printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
        if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
            printf "\n";
        fi
    done
}
alias tctest=__truecolourtest
alias 256ctest=__256colourtest

function __pushnfsip() {
	ip=$(echo $SSH_CLIENT | awk '{print $1}')
	echo "Pushing "$ip" into /etc/exports"
	replace=$(echo "/home/aykhaiweng		"$ip"(rw,sync,no_root_squash,insecure,no_subtree_check)" > /etc/exports)
	restart=$(systemctl restart nfs-kernel-server)
	sudo bash -c "$replace"
	sudo bash -c "$restart"
}

alias pushnfsip=__pushnfsip

# Use the SilverSurfer
export FZF_DEFAULT_COMMAND="ag --ignore '*.pyc' --ignore '*/*.pyc' --ignore-dir '*pycache*' --ignore-dir '.tox' --hidden --skip-vcs-ignores -g ''"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export DIRECTORY_COLOR_ARGUMENTS=""

# ======================================================= #
# OS Specific                                             #
# ======================================================= #
if [[ $uname == 'Darwin' ]]; then
    # Directory listing
    export DIRECTORY_COLOR_ARGUMENTS="-CF"

    # Python Goodness
    export PYTHON_CONFIGURE_OPTS="--enable-framework"

    # Sublime Text 3
    alias subl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'

    # Kitty Config
    export KITTY_CONFIG_DIRECTORY="$HOME/config/kitty/"

    # local pb copy
    launchctl load ~/.dotfiles/osx/remote-ssh/local.pbcopy.plist
    launchctl start local.pbcopy

    alias ctags="`brew --prefix`/bin/ctags"
else
    # Directory listing
    export DIRECTORY_COLOR_ARGUMENTS="--color=always"

    # Python Goodness
    export PYTHON_CONFIGURE_OPTS="--enable-shared"

    # I don't know what monster keeps chucking me into the vim folder when I type the name
    # But I want this shit to STOP.
    alias vim=/usr/bin/vim
fi

# ======================================================= #
# Post Agnostic Settings                                  #
# ======================================================= #
# Directory Listing
alias ls'ls -A $DIRECTORY_COLOR_ARGUMENTS'
alias ll='ls -Al'


# ======================================================= #
# PostgreSQL helper functions                             #
# ======================================================= #
# Restoring a DB for PostgreSQL
function restore_db() {
    # Shortcut for restoring DB for PSQL because I can't be bothered
    # to memorize the command
    db_name=$1
    db_psql_file=$2
    current_user=$USER
    echo "Recreating $db_name..."
    dropdb $db_name
    createdb $db_name
    echo "Restoring $db_name with $current_user and $db_psql_file..."
    psql -U $current_user ${@:3:99} $db_name < $db_psql_file
}

function rsyncfolder() {
    # Performs rsync of the cwd to a remote server/another folder
    PWD=$(pwd)
    TARGET=$1
    rsync $PWD $TARGET ${@:2:99}
}
