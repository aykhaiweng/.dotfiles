set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)

" workspace
Plugin 'thaerkh/vim-workspace'

" editor
" because who doesn't want to see indents?
Plugin 'thaerkh/vim-indentguides'
" folding for python
Plugin 'tmhedberg/SimpylFold'
" autocompletion
Plugin 'Valloric/YouCompleteMe'
" using this instead of the normal flake8 for python ac
Plugin 'vim-syntastic/syntastic'
" I needed a way to trim whitespaces faster
Plugin 'ntpeters/vim-better-whitespace'
" because I miss sublime text
Plugin 'terryma/vim-multiple-cursors'
" for noobs like me who have no idea how to use motions
Plugin 'easymotion/vim-easymotion'
" comment out blocks
Plugin 'tpope/vim-commentary'

" explorers
Plugin 'scrooloose/nerdtree'
" Plugin 'jistr/vim-nerdtree-tabs'
" Plugin 'kien/ctrlp.vim'
" prefer this over ctrlp
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'

" git
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-fugitive'

" status
" because airline is just way more light weight than powerline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" ColorScheme
Plugin 'mhartington/oceanic-next'

" Python
Plugin 'davidhalter/jedi-vim'
Plugin 'lambdalisue/vim-pyenv'
" Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/indentpython.vim'
"

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" global options
set encoding=utf-8
set nu
set splitright
set splitbelow
let g:autoclose_on = 0  " do not autoclose brackets
set exrc  " allow project specific .vimrc
set secure  " disallow .vimrc not owned by uname
set clipboard=unnamed
set background=dark
set t_Co=256
set backspace=2
set ttimeoutlen=0

" CONTROLS ------------------------------------------------------------------ "
" mouse
set mouse=a

" leader
let mapleader=","

" explicitly binding keys
vnoremap <Up>    k
vnoremap <Down>  j
vnoremap <Left>  h
vnoremap <Right> l
nnoremap <Up>    k
nnoremap <Down>  j
nnoremap <Left>  h
nnoremap <Right> l
" Hotkeys for $ and 0
nnoremap <S-L> $
nnoremap <S-H> 0
vnoremap <S-L> $
vnoremap <S-H> 0
" Page up and down
nnoremap <S-K> 15k
nnoremap <S-J> 15j
vnoremap <S-K> 15k
vnoremap <S-J> 15j

" key shortcuts for pane switching
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-Left>  <C-W><C-H>
nnoremap <C-Right> <C-W><C-L>
nnoremap <C-Up>    <C-W><C-K>
nnoremap <C-Down>  <C-W><C-J>

" Replace Escape with Tab
" nnoremap <Tab>         <Esc>
" vnoremap <Tab>         <Esc>gV
" onoremap <Tab>         <Esc>
" cnoremap <Tab>         <C-C><Esc>
" inoremap <Tab>         <Esc>`^
" inoremap <Leader><Tab> <Tab>

" Enable folding with the spacebar
nnoremap <space> za

" copy and pasting like a boss for MAC
nnoremap <C-c> :.w !pbcopy<CR><CR>
vnoremap <C-c> :w !pbcopy<CR><CR>
nnoremap <C-v> :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
inoremap <C-v> <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>

" indent control
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Tab navigation like Firefox.
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" Vim-style tab navigation
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap tx  :tabclose<CR>

" vim style buffer navigation
" ^ This line is reliant on fzf
nnoremap <leader>bl :bnext<CR>
nnoremap <leader>bh :bprev<CR>
nnoremap <leader>bx :bd<CR>

" other fzf keybindings
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fm :Marks<CR>

" multicursor key mapping
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-d>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" FZF mapping
nnoremap <Leader>fzf :FZF<CR>

" NerdTree mapping
noremap <Leader>0 :NERDTreeToggle<CR>
noremap <Leader>- :NERDTreeFind<CR>

" F_keys
noremap <silent> <F4> :set hlsearch! hlsearch?<CR>
nnoremap <silent> <F5> :so $MYVIMRC<CR>
nnoremap <F8> :set tabstop=4 shiftwidth=4 expandtab<CR>:retab!<CR>
" =========================================================================== "

" PLUGIN SETTINGS ----------------------------------------------------------- "
" syntastic
syntax on
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Enable folding
set foldmethod=indent
set foldlevel=99

" SimpylFold options
let g:SimpylFold_docstring_preview=1

" AutoComplete options
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" nerdtree
" ignore files
let NERDTreeIgnore=['\.pyc$', '\~$', '\.swo$', '\.swp$', '\.DS_Store$']
let NERDTreeShowHidden=1

" ctrlp NOT USING CTRLP ANYMORE
" ignore misc files
set wildignore=*.db
" ignore vim files
set wildignore+=*.swp,*.swo,*.so
" ignore python files
set wildignore+=*.pyc
" ignore mac files
set wildignore+=*.DS_Store
" ignore folders
let g:ctrlp_custom_ignore={
    \ 'dir': '\v[\/]\.(git|hg|svn)$',
    \ }


" vim-commentary
" If your filetype isn't supported, just add a new line for this:
" autocmd FileType apache setlocal commentstring=#\ %s


" FZF
let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-i': 'split',
    \ 'ctrl-s': 'vsplit' }

" betterwhitespace configuration
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1

" airline configuration
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" =========================================================================== "

" =========================================================================== "

" LOOK & FEEL --------------------------------------------------------------- "
" statusline
set laststatus=2
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\

" colorscheme
colorscheme OceanicNext

" current line highlights
highlight CursorLine cterm=None ctermbg=234
highlight CursorColumn cterm=None ctermbg=235
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup end

" highlights
" v this is commented out because it is now handled by better-whitespace
" highlight BadWhitespace ctermbg=red guibg=darkred
" match BadWhitespace /\s\+$/
highlight NonText ctermfg=236
highlight SpecialKey ctermfg=236
highlight ExtraWhitespace ctermbg=red
" =========================================================================== "


" EDITOR -------------------------------------------------------------------- "
" definitions
set tabstop=4  " length of a tab
set shiftwidth=4  " length of an indent
set fileformat=unix
set autoindent
set textwidth=80
set colorcolumn=80

" Python
au BufNewFile,BufRead *.py
    \ syntax on
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=80
    \ set expandtab
    \ set ruler
    \ let python_highlight_all=1
    \ let g:syntastic_python_checkers = ['flake8']
    \ syn match pythonBoolean "\<self\ze\."

" HTML, JS, CSS
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=4
    \ set shiftwidth=4
    \ set noexpandtab

au BufNewFile,BufRead Vagrant
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2
    \ set expandtab

" show whitespaces
set listchars=tab:\ \ ,trail:·,nbsp:~,extends:>,precedes:<,eol:¬
set list

" autocmds
" call Flake8 everytime the BufWritePost is called
" au BufReadPost,BufWritePost,InsertLeave *.py call Flake8()
" call GitGutter everytime the cursor is idling
au CursorHold,CursorHoldI * GitGutter
" =========================================================================== "
