set nocompatible              " required
filetype off                  " required


" python hosts
let g:python_host_prog=$HOME."/.pyenv/versions/neovim2/bin/python2"
let g:python3_host_prog=$HOME."/.pyenv/versions/neovim3/bin/python3"

" leader
let mapleader=","

" Initializing Plug
" Specify a directory for plugins
call plug#begin('~/.vim/plugged')


set rtp+=~/.vim/my-colors
Plug 'ayu-theme/ayu-vim'
Plug 'arcticicestudio/nord-vim'
Plug 'morhetz/gruvbox'


" TmuxVimNavigation
Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_disable_when_zoomed = 1
nnoremap <silent> <C-H> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-J> :TmuxNavigateDown<cr>
nnoremap <silent> <C-K> :TmuxNavigateUp<cr>
nnoremap <silent> <C-L> :TmuxNavigateRight<cr>


" Asynchronous Linting
Plug 'w0rp/ale'
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '!'
let g:ale_set_highlights = 1
let g:ale_lint_delay = 5000
let g:ale_lint_on_text_changed = 'normal'
let g:ale_set_loclist = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'


""" Editor
Plug 'thaerkh/vim-workspace'
nnoremap <leader>s :ToggleWorkspace<CR>
let g:workspace_session_name='workspace.vim'
let g:workspace_session_disable_on_args=1
let g:workspace_autosave_ignore = [
            \'gitcommit',
            \'__flygrep__',
            \'nerdtree',
            \'tagbar']

" Neosnippets
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
let g:neosnippet#snippets_directory='~/.vim/neosnippets/'
imap <C-e>     <Plug>(neosnippet_expand_or_jump)
smap <C-e>     <Plug>(neosnippet_expand_or_jump)
xmap <C-e>     <Plug>(neosnippet_expand_target)

" Indentation
Plug 'Yggdroot/indentLine'
let g:indentLine_showFirstIndentLevel = 1

Plug 'majutsushi/tagbar'
nnoremap <Leader>= :TagbarToggle<CR>
vnoremap <Leader>= :TagbarToggle<CR>

" because I miss sublime text
Plug 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=1

" for noobs like me who have no idea how to use motions
Plug 'easymotion/vim-easymotion'

" comment out blocks
Plug 'tpope/vim-commentary'

" YCM
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }


""" Explorers
Plug 'junegunn/fzf.vim' ", { 'on': ['FZF', 'Buffers', 'Marks'] }
set rtp+=~/.fzf
let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-i': 'split',
    \ 'ctrl-s': 'vsplit' }
nnoremap <Leader>fzf :FZF<CR>
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fm :Marks<CR>

Plug 'wsdjeg/FlyGrep.vim'
let g:FlyGrep_input_delay='1000'
let g:FlyGrep_search_tools=['ag']
map <Leader>fg :FlyGrep<CR>

Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] }
let NERDTreeIgnore=['\.pyc$', '\~$', '\.swo$', '\.swp$', '\.DS_Store$', '__pycache__']
let NERDTreeShowHidden=1
let g:NERDTreeQuitOnOpen=0
let g:NERDTreeWinSize=30
noremap <Leader>0 :NERDTreeToggle<CR>
noremap <Leader>- :NERDTreeFind<CR>


""" git
Plug 'airblade/vim-gitgutter'
let g:gitgutter_terminal_reports_focus=0

" git integration for vim
Plug 'tpope/vim-git'

" git wrapper for vim
Plug 'tpope/vim-fugitive'


""" status
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
let g:lightline = {
\   'separator': {'left': '', 'right': ''},
\   'subseparator': {'left': '', 'right': ''},
\   'tabline': {
\       'left': [['tabs']],
\       'right': [['buffers']]
\   },
\   'active': {
\       'left': [
\           [ 'mode', 'paste' ],
\           [ 'readonly', 'filepath' ],
\           [ 'modified' ]
\       ],
\       'right': [
\           [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
\           [ 'lineinfo' ],
\           [ 'fileformat', 'fileencoding', 'filetype' ]
\       ]
\   },
\   'inactive': {
\       'left': [
\           [ 'filepath', 'modified' ]
\       ],
\       'right': [['']]
\   },
\   'component': {
\       'lineinfo': '%3l:%-2v'
\   },
\   'component_function': {
\       'linter_checking': 'lightline#ale#checking',
\       'linter_warnings': 'lightline#ale#warnings',
\       'linter_errors': 'lightline#ale#errors',
\       'linter_ok': 'lightline#ale#ok',
\       'gitbranch': 'fugitive#head',
\       'filepath': 'LightlineFilepath',
\   }
\}

command! LightlineReload call LightlineReload()
function! LightlineReload()
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfunction

function! LightlineFilepath()
    let filename = expand('%f:h') !=# '' ? expand('%f:h') : '-'
    return filename
endfunction

let g:lightline.component_type = {
  \  'linter_checking': 'left',
  \  'linter_warnings': 'warning',
  \  'linter_errors': 'error',
  \  'linter_ok': 'left',
  \ }
set showtabline=2  " Show tabline
set guioptions-=e  " Don't use GUI tabline

" Bufferline
" Plug 'bling/vim-bufferline'


""" Syntax Highlighting
Plug 'sheerun/vim-polyglot'


""" Python
" folding for python
Plug 'tmhedberg/SimpylFold', {'for': 'python'}
let g:SimpylFold_docstring_preview=1

" Better python syntax highlighting
" Plug 'vim-python/python-syntax', {'for': 'python'}
" let g:python_highlight_all=1
" let g:python_self_cls_highlight=1

" python indentation for vim
" Plug 'vim-scripts/indentpython.vim', {'for': 'python'}

" JEDI
Plug 'davidhalter/jedi-vim'
let g:jedi#completions_enabled = 0
let g:jedi#smart_auto_mappings = 0
let g:jedi#show_call_signatures = 2
let g:jedi#goto_command = "<leader>jc"
let g:jedi#goto_assignments_command = "<leader>ja"
let g:jedi#goto_definitions_command = "<leader>jd"
let g:jedi#documentation_command = "<leader>jl"


""" HTML & CSS
Plug 'mattn/emmet-vim', {'for': 'html'}

" devicons fun fun fun
Plug 'ryanoasis/vim-devicons'
let g:webdevicons_conceal_nerdtree_brackets=1
let g:WebDevIconsNerdTreeAfterGlyphPadding=' '

" Css Color
" Plug 'ap/vim-css-color', {'for': ['html', 'js', 'css'] }

call plug#end()
" =========================================================================== "

" CONTROLS ------------------------------------------------------------------ "
" mouse
set mouse=a

" Funny way to setup the leader key so it echos something when it is pressed
noremap <Leader> :echo '-- LEADER --'<CR><Leader>

" explicitly binding keys
vnoremap <Up>    k
vnoremap <Down>  j
vnoremap <Left>  h
vnoremap <Right> l
nnoremap <Up>    k
nnoremap <Down>  j
nnoremap <Left>  h
nnoremap <Right> l
" Hotkeys for $ and 0
nnoremap <S-L> $
nnoremap <S-H> 0
vnoremap <S-L> $
vnoremap <S-H> 0
" Page up and down
nnoremap <S-K> 15k
nnoremap <S-J> 15j
vnoremap <S-K> 15k
vnoremap <S-J> 15j

" key shortcuts for pane switching
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>
" nnoremap <C-Left>  <C-W><C-H>
" nnoremap <C-Right> <C-W><C-L>
" nnoremap <C-Up>    <C-W><C-K>
" nnoremap <C-Down>  <C-W><C-J>

" Folding and shit
nnoremap <space> za

" location list
nnoremap <Leader>ll :lopen<CR>
nnoremap <Leader>lx :lclose<CR>

" indent control
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
" inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Tab navigation like Firefox.
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" Vim-style tab navigation
nnoremap tj  :tabfirst<CR>
nnoremap tl  :tabnext<CR>
nnoremap th  :tabprev<CR>
nnoremap tk  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnew<CR>
nnoremap tm  :tabm<Space>
nnoremap tx  :tabclose<CR>

" vim style buffer navigation
" ^ This line is reliant on fzf
nnoremap <Leader>bl :bnext<CR>
nnoremap <Leader>bh :bprev<CR>
nnoremap <Leader>bx :bd<CR>

" F_keys
nnoremap <silent> <F1> :set hlsearch! hlsearch?<CR>
" vnoremap <silent> F :set hlsearch! hlsearch?<CR>
vnoremap <silent> <F5> :%sort<CR>
nnoremap <silent> <F5> :so $MYVIMRC<CR>:LightlineReload<CR>
nnoremap <F8> :set tabstop=4 shiftwidth=4 expandtab<CR>:retab!<CR>

function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
    let buflist = GetBufferList()
    for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
        if bufwinnr(bufnum) != -1
            exec(a:pfx.'close')
            return
        endif
    endfor
    if a:pfx == 'l' && len(getloclist(0)) == 0
        echohl ErrorMsg
        echo "Location List is Empty."
        return
    endif
    let winnr = winnr()
    exec(a:pfx.'open')
    if winnr() != winnr
        wincmd p
    endif
endfunction

au BufNewFile, BufRead *.html set filetype=html

nmap <silent> <leader>ll :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>ee :call ToggleList("Quickfix List", 'c')<CR>
" =========================================================================== "


" LOOK & FEEL --------------------------------------------------------------- "
" ColorScheme
" if (has("termguicolors"))
"     set termguicolors
" endif

set termguicolors
set t_Co=256
syntax on
set background=dark
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"
" Gruvbox
" let lightline.colorscheme='gruvbox'
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='hard'
let g:gruvbox_italicize_comments=1
let g:gruvbox_italicize_strings=1
let g:gruvbox_improved_strings=0
let g:gruvbox_improved_warnings=0
silent! colorscheme gruvbox

" statusline
set laststatus=2
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\

" current line highlights
" highlight CursorLine cterm=None ctermbg=234 guibg=#000000
" highlight CursorColumn cterm=None ctermbg=235 guibg=#000000
" augroup CursorLine
"     au!
"     au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"     au WinLeave * setlocal nocursorline
" augroup end

" highlight ExtraWhitespace ctermbg=red

" EDITOR -------------------------------------------------------------------- "
" definitions
set splitright
set splitbelow
let g:autoclose_on=1 " do not autoclose brackets
set exrc             " allow project specific .vimrc
set secure           " disallow .vimrc not owned by uname
set clipboard=unnamed,unnamedplus
set regexpengine=2
set tabstop=4        " length of a tab
set shiftwidth=4     " length of an indent
set ruler
set autoindent
set encoding=utf-8
set number           " show line numbers
set nornu            " disabling relative numbers
set showmatch        " show matching paranthesis
set backspace=2      " normal editor backspacing
set timeoutlen=1000
set ttimeoutlen=2
set incsearch
set ignorecase       " ignore the case when searching
set smartcase        " case ignored if the search is all lower case
set undolevels=1000  " more undo levels
set scrolloff=7
set shortmess=a      " Decrease the message size
set cmdheight=1      " Change height of the cmd prompt
set redrawtime=1000  " Fixes syntax highlighting on large files
set noshowmode       " No showmode
set lazyredraw


" Refresh Airline theme on entering a buffer
au! BufEnter *
    \ :LightlineReload

" show whitespaces
set listchars=tab:--,trail:·,nbsp:~,extends:>,precedes:<,eol:¬
set list
" =========================================================================== "


set directory=$HOME/.vim/swapfiles//
set backupdir=$HOME/.vim/backup//
set undodir=$HOME/.vim/undodir//
silent execute '!mkdir -p ~/.vim/swapfiles'
silent execute '!mkdir -p ~/.vim/backup'
silent execute '!mkdir -p ~/.vim/undodir'


" After Directories
set rtp+=~/.vim/after


" MACVIM FIX
let macvim_skip_colorscheme=1

" Source vimrc-local if it exists
" if !empty(glob("~/.vimrc-local"))
silent! source ~/.vimrc-local
" endif
