set nocompatible              " required
filetype off                  " required


" python hosts
let g:python_host_prog=$NEOVIM2
let g:python3_host_prog=$NEOVIM3

" leader
let mapleader=","

" Initializing Plug
" Specify a directory for plugins
call plug#begin('~/.vim/plugged')


set rtp+=~/.vim/my-colors
Plug 'rafi/awesome-vim-colorschemes'
Plug 'ayu-theme/ayu-vim'


""" AUTOCOMPLETION
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py --all' }


""" ASYNC STUFF
if has('nvim')
    " DEOPLETE
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

    " DENITE
    " Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }

    " DEOPPET VAPOURWARE
    " Plug 'Shougo/deoppet.nvim', { 'do': ':UpdateRemotePlugins' }

    " DEOPLETE JEDI
    Plug 'zchee/deoplete-jedi', { 'for': 'python' }
    let g:jedi#completions_enabled = 0  " Disable autocompletions from JEDI

    " ECHO DOC
    Plug 'Shougo/echodoc.vim', { 'do': ':UpdateRemotePlugins' }

    " Asynchronous Highlighting
    " Plug 'KeitaNakamura/highlighter.nvim', { 'do': ':UpdateRemotePlugins' }
    " let g:highlighter#auto_update = 2  " AutoHighlight when file opens
	
	" Snippets
	Plug 'Shougo/neosnippet'
	Plug 'Shougo/neosnippet-snippets'
	let g:neosnippet#snippets_directory='~/.vim/neosnippets/'
	imap <C-e>     <Plug>(neosnippet_expand_or_jump)
	smap <C-e>     <Plug>(neosnippet_expand_or_jump)
	xmap <C-e>     <Plug>(neosnippet_expand_target)

    " Another type of Asynchronous Highlighting
    Plug 'c0r73x/neotags.nvim', { 'do': ':UpdateRemotePlugins' }
    let g:neotags_enabled = 1
" else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif
" DEOPLETE OPTIONS
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_refresh_always = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#ignore_sources = {'_': ['tag']}
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<C-D>"
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <silent><expr> <C-Space>
	\ pumvisible() ? "\<C-n>" :
	\ <SID>check_back_space() ? "\<TAB>" :
	\ deoplete#mappings#manual_complete()
	function! s:check_back_space() abort "{{{
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~ '\s'
	endfunction"}}}


" TmuxVimNavigation
Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-H> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-J> :TmuxNavigateDown<cr>
nnoremap <silent> <C-K> :TmuxNavigateUp<cr>
nnoremap <silent> <C-L> :TmuxNavigateRight<cr>
" nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>
" Original Navigation Bindings
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>
" nnoremap <C-Left>  <C-W><C-H>
" nnoremap <C-Right> <C-W><C-L>
" nnoremap <C-Up>    <C-W><C-K>
" nnoremap <C-Down>  <C-W><C-J>


" Asynchronous Linting
Plug 'w0rp/ale'
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '--'
let g:ale_set_highlights = 1
let g:ale_lint_delay = 5000
let g:ale_lint_on_text_changed = 'normal'
let g:ale_set_loclist = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" Asynchronous search
Plug 'wsdjeg/FlyGrep.vim' " , { 'on': 'FlyGrep' }
map <Leader>fg :FlyGrep<CR>


""" Editor
Plug 'thaerkh/vim-workspace'
nnoremap <leader>s :ToggleWorkspace<CR>
let g:workspace_session_name='workspace.vim'
let g:workspace_session_disable_on_args=1
" let g:workspace_persist_undo_history=1        " enabled = 1 (default), disabled = 0
" let g:workspace_undodir='~/.vim/workspace-undodir'
"

" Plug 'nathanaelkane/vim-indent-guides'
" Indentation
Plug 'Yggdroot/indentLine'
" let g:indentLine_char = ''
" let g:indentLine_first_char = ''
let g:indentLine_showFirstIndentLevel = 1
" let g:indentLine_setColors = 0

Plug 'majutsushi/tagbar'
nnoremap <Leader>= :TagbarToggle<CR>
vnoremap <Leader>= :TagbarToggle<CR>


" because I miss sublime text
Plug 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=1

" for noobs like me who have no idea how to use motions
Plug 'easymotion/vim-easymotion'

" comment out blocks
Plug 'tpope/vim-commentary'


""" Explorers
Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] }
let NERDTreeIgnore=['\.pyc$', '\~$', '\.swo$', '\.swp$', '\.DS_Store$']
let NERDTreeShowHidden=1
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeWinSize=60
noremap <Leader>0 :NERDTreeToggle<CR>
noremap <Leader>- :NERDTreeFind<CR>
" autocmd BufEnter *
"     \ if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" " ^ automatically close if NERDTree is the only thing open
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter *
"     \ if argc() == 0 && !exists("s:std_in") | NERDTree | endif

Plug 'junegunn/fzf.vim' ", { 'on': ['FZF', 'Buffers', 'Marks'] }
set rtp+=~/.fzf
let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-i': 'split',
    \ 'ctrl-s': 'vsplit' }
nnoremap <Leader>fzf :FZF<CR>
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fm :Marks<CR>


""" git
Plug 'airblade/vim-gitgutter'
let g:gitgutter_terminal_reports_focus=0

" git integration for vim
Plug 'tpope/vim-git'

" git wrapper for vim
Plug 'tpope/vim-fugitive'


""" status
" because airline is just way more light weight than powerline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_left_alt_sep= ''
let g:airline_left_sep = ''

""" Python
" folding for python
Plug 'tmhedberg/SimpylFold', {'for': 'python'}
set foldmethod=syntax
set foldlevel=99
let g:SimpylFold_docstring_preview=1


" Better python syntax highlighting
" Plug 'vim-python/python-syntax', {'for': 'python'}
" let g:python_highlight_all=1
" let g:python_self_cls_highlight=1
" let g:syntastic_python_checkers=['flake8']

" penv wrapper for vim
Plug 'davidhalter/jedi-vim', {'for': 'python'}

" python indentation for vim
Plug 'vim-scripts/indentpython.vim', {'for': 'python'}


""" HTML & CSS
Plug 'mattn/emmet-vim', {'for': 'html'}

" devicons fun fun fun
Plug 'ryanoasis/vim-devicons'
let g:webdevicons_conceal_nerdtree_brackets=1
let g:WebDevIconsNerdTreeAfterGlyphPadding='  '
let g:WebDevIconsNerdTreeGitPluginForceVAlign=1

" Css Color
Plug 'ap/vim-css-color', {'for': ['html', 'js', 'css'] }

" All of your Plugs must be added before the following line
" Initialize plugin system
call plug#end()
" =========================================================================== "


" CONTROLS ------------------------------------------------------------------ "
" mouse
set mouse=a


" Funny way to setup the leader key so it echos something when it is pressed
noremap <Leader> :echo '-- LEADER --'<CR><Leader>

" explicitly binding keys
vnoremap <Up>    k
vnoremap <Down>  j
vnoremap <Left>  h
vnoremap <Right> l
nnoremap <Up>    k
nnoremap <Down>  j
nnoremap <Left>  h
nnoremap <Right> l
" Hotkeys for $ and 0
nnoremap <S-L> $
nnoremap <S-H> 0
vnoremap <S-L> $
vnoremap <S-H> 0
" Page up and down
nnoremap <S-K> 15k
nnoremap <S-J> 15j
vnoremap <S-K> 15k
vnoremap <S-J> 15j

" key shortcuts for pane switching
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>
" nnoremap <C-Left>  <C-W><C-H>
" nnoremap <C-Right> <C-W><C-L>
" nnoremap <C-Up>    <C-W><C-K>
" nnoremap <C-Down>  <C-W><C-J>

" Repeat last command with spacebar
" nnoremap <space> @@
"
" Folding and shit
nnoremap <space> za

" location list
nnoremap <Leader>ll :lopen<CR>
nnoremap <Leader>lx :lclose<CR>

" copy and pasting like a boss for MAC
nnoremap <C-c> :.w !pbcopy<CR><CR>
vnoremap <C-c> :w !pbcopy<CR><CR>
nnoremap <C-v> :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
inoremap <C-v> <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>

" indent control
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
" inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Tab navigation like Firefox.
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" Vim-style tab navigation
nnoremap tj  :tabfirst<CR>
nnoremap tl  :tabnext<CR>
nnoremap th  :tabprev<CR>
nnoremap tk  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnew<Space>
nnoremap tm  :tabm<Space>
nnoremap tx  :tabclose<CR>

" vim style buffer navigation
" ^ This line is reliant on fzf
nnoremap <Leader>bl :bnext<CR>
nnoremap <Leader>bh :bprev<CR>
nnoremap <Leader>bx :bd<CR>

" F_keys
nnoremap <silent> F :set hlsearch! hlsearch?<CR>
vnoremap <silent> F :set hlsearch! hlsearch?<CR>
vnoremap <silent> <F5> :%sort<CR>
nnoremap <silent> <F5> :so $MYVIMRC<CR>:AirlineRefresh<CR>
nnoremap <F8> :set tabstop=4 shiftwidth=4 expandtab<CR>:retab!<CR>

function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
    let buflist = GetBufferList()
    for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
        if bufwinnr(bufnum) != -1
            exec(a:pfx.'close')
            return
        endif
    endfor
    if a:pfx == 'l' && len(getloclist(0)) == 0
        echohl ErrorMsg
        echo "Location List is Empty."
        return
    endif
    let winnr = winnr()
    exec(a:pfx.'open')
    if winnr() != winnr
        wincmd p
    endif
endfunction

nmap <silent> <leader>ll :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>ee :call ToggleList("Quickfix List", 'c')<CR>
" =========================================================================== "


" LOOK & FEEL --------------------------------------------------------------- "
" ColorScheme
if (has("termguicolors"))
    set termguicolors
endif
set t_Co=256
syntax on
set background=dark
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"
" Gruvbox
let g:airline_theme='gruvbox'
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='hard'
let g:gruvbox_italicize_comments=1
let g:gruvbox_italicize_strings=1
let g:gruvbox_improved_strings=0
let g:gruvbox_improved_warnings=1
silent! colorscheme aykhaiweng
"
" Ayu Theme
" let ayucolor="light"  " for light version of theme
" let g:airline_theme='ayu'
" let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme
" colorscheme ayu
"
" Firewatch
" let g:two_firewatch_italics=1
" silent! colorscheme two-firewatch
" let g:airline_theme='twofirewatch' " if you have Airline installed and want the associated theme

" statusline
set laststatus=2
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\

" current line highlights
" highlight CursorLine cterm=None ctermbg=234 guibg=#000000
" highlight CursorColumn cterm=None ctermbg=235 guibg=#000000
" augroup CursorLine
"     au!
"     au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"     au WinLeave * setlocal nocursorline
" augroup end

highlight ExtraWhitespace ctermbg=red

" EDITOR -------------------------------------------------------------------- "
" definitions
set splitright
set splitbelow
let g:autoclose_on=0  " do not autoclose brackets
set exrc            " allow project specific .vimrc
set secure          " disallow .vimrc not owned by uname
set clipboard=unnamed,unnamedplus
set regexpengine=1
set tabstop=4       " length of a tab
set shiftwidth=4    " length of an indent
set ruler
set autoindent
set encoding=utf-8
set number           " show line numbers
set nornu            " disabling relative numbers
set showmatch        " show matching paranthesis
set backspace=2      " normal editor backspacing
set timeoutlen=1000
set ttimeoutlen=2
set incsearch
set ignorecase       " ignore the case when searching
set smartcase        " case ignored if the search is all lower case
set lazyredraw
set undolevels=1000  " more undo levels
" set ttyfast
set scrolloff=3
set shortmess=a      " Decrease the message size
set cmdheight=1      " Change height of the cmd prompt


" Refresh Airline theme on entering a buffer
au! BufEnter *
    \ :AirlineRefresh

" show whitespaces
set listchars=tab:--,trail:·,nbsp:~,extends:>,precedes:<,eol:¬
set list

" =========================================================================== "


set directory=$HOME/.vim/swapfiles//
set backupdir=$HOME/.vim/backup//
set undodir=$HOME/.vim/undodir//
silent execute '!mkdir -p ~/.vim/swapfiles'
silent execute '!mkdir -p ~/.vim/backup'
silent execute '!mkdir -p ~/.vim/undodir'


" After Directories
set rtp+=~/.vim/after


" MACVIM FIX
let macvim_skip_colorscheme=1

" Source vimrc-local if it exists
" if !empty(glob("~/.vimrc-local"))
silent! source ~/.vimrc-local
" endif
