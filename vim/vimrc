set nocompatible              " required
filetype off                  " required


" leader
let mapleader=","


" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'


Plugin 'mhartington/oceanic-next'
set rtp+=~/.vim/bundle/oceanic-next/colors
Plugin 'hzchirs/vim-material'
set rtp+=~/.vim/bundle/vim-material/colors
Plugin 'tyrannicaltoucan/vim-quantum'
set rtp+=~/.vim/bundle/vim-quantum/colors
Plugin 'agude/vim-eldar'
set rtp+=~/.vim/bundle/vim-eldar/colors
Plugin 'flazz/vim-colorschemes'
set rtp+=~/.vim/bundle/vim-colorschemes/colors

""" Editor
Plugin 'thaerkh/vim-workspace'
nnoremap <leader>s :ToggleWorkspace<CR>
let g:workspace_session_name='workspace.vim'
let g:workspace_session_disable_on_args=1
let g:workspace_persist_undo_history=1        " enabled = 1 (default), disabled = 0
" let g:workspace_undodir='~/.vim/workspace-undodir'
"
" because who doesn't want to see indents?
" Plugin 'thaerkh/vim-indentguides'

" autocompletion
Plugin 'Valloric/YouCompleteMe'
let g:ycm_autoclose_preview_window_after_completion=1
map <Leader>yg  :YcmCompleter GoToDefinitionElseDeclaration<CR>

Plugin 'sirver/ultisnips'
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<C-E>"
let g:UltiSnipsJumpForwardTrigger="<C-B>"
let g:UltiSnipsJumpBackwardTrigger="<C-Z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/ultisnips/"
map <Leader>use :UltiSnipsEdit<CR>

" using this instead of the normal flake8 for python ac
Plugin 'vim-syntastic/syntastic'
syntax on
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" I needed a way to trim whitespaces faster
" Plugin 'ntpeters/vim-better-whitespace'
" let g:better_whitespace_enabled=1
" let g:strip_whitespace_on_save=1

" because I miss sublime text
Plugin 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=1
" let g:multi_cursor_next_key='<C-d>'
" let g:multi_cursor_prev_key='<C-p>'
" let g:multi_cursor_skip_key='<C-x>'
" let g:multi_cursor_quit_key='<Esc>'

" for noobs like me who have no idea how to use motions
Plugin 'easymotion/vim-easymotion'

" comment out blocks
Plugin 'tpope/vim-commentary'


""" Explorers
Plugin 'scrooloose/nerdtree'
let NERDTreeIgnore=['\.pyc$', '\~$', '\.swo$', '\.swp$', '\.DS_Store$']
let NERDTreeShowHidden=1
noremap <Leader>0 :NERDTreeToggle<CR>
noremap <Leader>- :NERDTreeFind<CR>
" autocmd BufEnter *
"     \ if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" " ^ automatically close if NERDTree is the only thing open
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter *
"     \ if argc() == 0 && !exists("s:std_in") | NERDTree | endif

Plugin 'junegunn/fzf.vim'
set rtp+=~/.fzf
let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-i': 'split',
    \ 'ctrl-s': 'vsplit' }
nnoremap <Leader>fzf :FZF<CR>
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fm :Marks<CR>


""" git
" Plugin 'airblade/vim-gitgutter'
" let g:gitgutter_terminal_reports_focus=0

" git integration for vim
Plugin 'tpope/vim-git'

" git wrapper for vim
Plugin 'tpope/vim-fugitive'


""" status
" because airline is just way more light weight than powerline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='quantum'
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'


""" Python
" folding for python
Plugin 'tmhedberg/SimpylFold'
set foldmethod=indent
set foldlevel=99
let g:SimpylFold_docstring_preview=1

" jedi integration for vim
Plugin 'davidhalter/jedi-vim'
let g:jedi#goto_command = "<Leader>jc"
let g:jedi#goto_assignments_command = "<Leader>ja"
let g:jedi#goto_definitions_command = "<Leader>jd"
let g:jedi#documentation_command = "<Leader>jk"
let g:jedi#usages_command = "<Leader>ju"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<Leader>jr"
let g:jedi#show_call_signatures = "1"

" penv wrapper for vim
Plugin 'lambdalisue/vim-pyenv'

" python indentation for vim
Plugin 'vim-scripts/indentpython.vim'


" devicons fun fun fun
Plugin 'ryanoasis/vim-devicons'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" =========================================================================== "


" CONTROLS ------------------------------------------------------------------ "
" mouse
set mouse=a


" Funny way to setup the leader key so it echos something when it is pressed
noremap <Leader> :echo '-- LEADER --'<CR><Leader>

" explicitly binding keys
vnoremap <Up>    k
vnoremap <Down>  j
vnoremap <Left>  h
vnoremap <Right> l
nnoremap <Up>    k
nnoremap <Down>  j
nnoremap <Left>  h
nnoremap <Right> l
" Hotkeys for $ and 0
nnoremap <S-L> $
nnoremap <S-H> 0
vnoremap <S-L> $
vnoremap <S-H> 0
" Page up and down
nnoremap <S-K> 15k
nnoremap <S-J> 15j
vnoremap <S-K> 15k
vnoremap <S-J> 15j

" key shortcuts for pane switching
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-Left>  <C-W><C-H>
nnoremap <C-Right> <C-W><C-L>
nnoremap <C-Up>    <C-W><C-K>
nnoremap <C-Down>  <C-W><C-J>

" Repeat last command with spacebar
" nnoremap <space> @@

" location list
nnoremap <Leader>ll :lopen<CR>
nnoremap <Leader>lx :lclose<CR>

" copy and pasting like a boss for MAC
nnoremap <C-c> :.w !pbcopy<CR><CR>
vnoremap <C-c> :w !pbcopy<CR><CR>
nnoremap <C-v> :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
inoremap <C-v> <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>

" indent control
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Tab navigation like Firefox.
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" Vim-style tab navigation
nnoremap th  :tabfirst<CR>
nnoremap tk  :tabnext<CR>
nnoremap tj  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnew<Space>
nnoremap tm  :tabm<Space>
nnoremap tx  :tabclose<CR>

" vim style buffer navigation
" ^ This line is reliant on fzf
nnoremap <Leader>bl :bnext<CR>
nnoremap <Leader>bh :bprev<CR>
nnoremap <Leader>bx :bd<CR>

" F_keys
nnoremap <silent> F :set hlsearch! hlsearch?<CR>
vnoremap <silent> F :set hlsearch! hlsearch?<CR>
vnoremap <silent> <F5> :%sort!<CR>
nnoremap <silent> <F5> :so $MYVIMRC<CR>
nnoremap <F8> :set tabstop=4 shiftwidth=4 expandtab<CR>:retab!<CR>
" =========================================================================== "


" LOOK & FEEL --------------------------------------------------------------- "
" ColorScheme
if (has("termguicolors"))
    set termguicolors
endif
syntax enable
" let g:quantum_black=1
" let g:quantum_italics=1
colorscheme Molokai
set background=dark

" statusline
set laststatus=2
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\

" current line highlights
" highlight CursorLine cterm=None ctermbg=234 guibg=#000000
" highlight CursorColumn cterm=None ctermbg=235 guibg=#000000
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup end

" highlights
" v this is commented out because it is now handled by better-whitespace
" highlight BadWhitespace ctermbg=red guibg=darkred
" match BadWhitespace /\s\+$/
" highlight Comment ctermfg=245
" highlight NonText ctermfg=238
" highlight SpecialKey ctermfg=238
highlight ExtraWhitespace ctermbg=red

" EDITOR -------------------------------------------------------------------- "
" definitions
set splitright
set splitbelow
let g:autoclose_on = 0  " do not autoclose brackets
set exrc  " allow project specific .vimrc
set secure  " disallow .vimrc not owned by uname
set clipboard=unnamed
set tabstop=4       " length of a tab
set shiftwidth=4    " length of an indent
set ruler
set autoindent
set encoding=utf-8
set number           " show line numbers
set nornu            " disabling relative numbers
set showmatch        " show matching paranthesis
set backspace=2      " normal editor backspacing
set timeoutlen=1000
set ttimeoutlen=2
set incsearch
set ignorecase       " ignore the case when searching
set smartcase        " case ignored if the search is all lower case
set lazyredraw
set undolevels=1000  " more undo levels
set ttyfast
set so=3

" Python
au BufNewFile,BufRead *.py
    \ syntax on
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set expandtab
    \ set colorcolumn=80
    \ set syntax=python
    \ let python_highlight_all=1
    \ let g:syntastic_python_checkers = ['flake8']

" HTML, JS, CSS
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=4
    \ set shiftwidth=4
    \ set noexpandtab

au BufNewFile,BufRead Vagrant
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2
    \ set expandtab
    \ set syntax=ruby

" Refresh Airline theme on entering a buffer
au! BufEnter *
    \ :AirlineRefresh

" show whitespaces
set listchars=tab:--,trail:·,nbsp:~,extends:>,precedes:<,eol:¬
set list

" autocmds
" call Flake8 everytime the BufWritePost is called
" au BufReadPost,BufWritePost,InsertLeave *.py call Flake8()
" call GitGutter everytime the cursor is idling
" au CursorHold,CursorHoldI * GitGutter

" =========================================================================== "


set directory=$HOME/.vim/swapfiles//
set backupdir=$HOME/.vim/backup//
set undodir=$HOME/.vim/undodir//
silent execute '!mkdir -p ~/.vim/swapfiles'
silent execute '!mkdir -p ~/.vim/backup'
silent execute '!mkdir -p ~/.vim/undodir'


" After Directories
set rtp+=~/.vim/after


" MACVIM FIX
let macvim_skip_colorscheme=1
